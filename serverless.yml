service: haargos-serverless
frameworkVersion: '3'

plugins:
  - serverless-domain-manager
  - serverless-plugin-typescript
custom:
  customDomain:
    domainName: api.haargos.smartrezydencja.pl
    basePath: ''
    stage: '$default'
    createRoute53Record: true
    endpointType: regional
    apiType: http
  userTableName: 'user-table-${sls:stage}'
  observationDataTableName: 'observations-table-${sls:stage}'
  installationTableName: 'installations-table-${sls:stage}'
  configurationTableName: 'configuration-table-${sls:stage}'
  dnsVerificationTableName: 'dns-verification-table-${sls:stage}'
  crypto:
    key: '793I4BGlD$czvtCWKBDWKy7Og6GgFl^@'
  auth0:
    issuerBaseUrl: 'https://dev-ofc2nc2a0lc4ncig.eu.auth0.com/'
    audience: 'https://api.haargos.smartrezydencja.pl'
    domain: 'dev-ofc2nc2a0lc4ncig.eu.auth0.com'
    clientId: '3EGUK8VIxgWNygQ1My32IIMeFz2KFeXm'
  maxObservationsKept: 10
  returnObservationCount: 10

provider:
  name: aws
  runtime: nodejs18.x
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UserTable, Arn]
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
            - dynamodb:GetItem
          Resource:
            - Fn::GetAtt: [ConfigurationTable, Arn]

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:*:*:table/${self:custom.userTableName}/index/*
            - arn:aws:dynamodb:*:*:table/${self:custom.observationDataTableName}/index/*

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            # - dynamodb:UpdateItem
            - dynamodb:BatchWriteItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ObservationTable, Arn]

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [InstallationTable, Arn]

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [DnsVerificationTable, Arn]
  environment:
    # Tables
    USERS_TABLE: ${self:custom.userTableName}
    OBSERVATION_TABLE: ${self:custom.observationDataTableName}
    INSTALLATION_TABLE: ${self:custom.installationTableName}
    SLS_STAGE: ${opt:stage, 'dev'}
    CONFIGURATION_TABLE: ${self:custom.configurationTableName}
    DNS_VERIFICATION_TABLE: ${self:custom.dnsVerificationTableName}

    # Auth0
    AUTH0_ISSUER_BASE_URL: ${self:custom.auth0.issuerBaseUrl}
    AUTH0_AUDIENCE: ${self:custom.auth0.audience}
    AUTH0_DOMAIN: ${self:custom.auth0.domain}
    AUTH0_CLIENT_ID: ${self:custom.auth0.clientId}

    # Crypto
    CRYPTO_KEY: ${self:custom.crypto.key}

    # Settings
    MAX_OBSERVATIONS_KEPT: ${self:custom.maxObservationsKept}
    RETURN_OBSERVATION_COUNT: ${self:custom.returnObservationCount}

functions:
  api:
    handler: index.handler
    events:
      - httpApi: '*'

  automation:
    handler: jobs/automation.handler
    events:
      - schedule:
          rate: rate(4 hours)
          enabled: true

  dns_verifier:
    handler: jobs/dns_verifier.handler
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: secret
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: secret
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.userTableName}

    ObservationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.observationDataTableName}
        AttributeDefinitions:
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: installation_id
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: userId-installation_id-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: installation_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    InstallationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.installationTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    DnsVerificationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dnsVerificationTableName}
        AttributeDefinitions:
          - AttributeName: installation_id
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: installation_id
            KeyType: HASH
          - AttributeName: type
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
  
    ConfigurationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.configurationTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
