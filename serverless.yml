service: haargos-serverless
frameworkVersion: '3'

plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: api.haargos.smartrezydencja.pl
    basePath: ''
    stage: '$default'
    createRoute53Record: true
    endpointType: regional
    apiType: http
  userTableName: 'user-table-${sls:stage}'
  observationDataTableName: 'observation-table-${sls:stage}'
  installationTableName: 'installations-table-${sls:stage}'
  configurationTableName: 'configuration-table-${sls:stage}'
  auth0:
    issuerBaseUrl: 'https://dev-ofc2nc2a0lc4ncig.eu.auth0.com/'
    audience: 'https://api.haargos.smartrezydencja.pl'
    domain: 'dev-ofc2nc2a0lc4ncig.eu.auth0.com'
    clientId: '3EGUK8VIxgWNygQ1My32IIMeFz2KFeXm'

provider:
  name: aws
  runtime: nodejs18.x
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            # - dynamodb:PutItem
            # - dynamodb:UpdateItem
            # - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UserTable, Arn]
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
            - dynamodb:GetItem
          Resource:
            - Fn::GetAtt: [ConfigurationTable, Arn]

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:*:*:table/${self:custom.userTableName}/index/*

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            # - dynamodb:UpdateItem
            # - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ObservationTable, Arn]

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            # - dynamodb:PutItem
            - dynamodb:UpdateItem
            # - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [InstallationTable, Arn]
  environment:
    # TABLES
    USERS_TABLE: ${self:custom.userTableName}
    OBSERVATION_TABLE: ${self:custom.observationDataTableName}
    INSTALLATION_TABLE: ${self:custom.installationTableName}
    SLS_STAGE: ${opt:stage, 'dev'}
    CONFIGURATION_TABLE: ${self:custom.configurationTableName}

    # AUTH0
    AUTH0_ISSUER_BASE_URL: ${self:custom.auth0.issuerBaseUrl}
    AUTH0_AUDIENCE: ${self:custom.auth0.audience}
    AUTH0_DOMAIN: ${self:custom.auth0.domain}
    AUTH0_CLIENT_ID: ${self:custom.auth0.clientId}

functions:
  api:
    handler: index.handler
    events:
      - httpApi: '*'

  automation:
    handler: automation.handler
    events:
      - schedule:
          rate: rate(4 hours)
          enabled: true

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: secret
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: secret
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.userTableName}

    ObservationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.observationDataTableName}
        AttributeDefinitions:
          - AttributeName: installation_id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: installation_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    InstallationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.installationTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ConfigurationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.configurationTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
